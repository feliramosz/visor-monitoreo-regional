name: Despliegue de Visor Monitoreo Regional

on:
  push:
    branches:
      - main
      - develop

# Tareas a ejecutar
jobs:
  deploy:
    runs-on: ubuntu-latest 

    steps:
      # Paso 1: Clonar el repositorio en la máquina virtual de GitHub Actions      
      - name: Checkout del código
        uses: actions/checkout@v3 # Puedes probar con v4 o superior si lo deseas, pero v3 es seguro.

      # Paso 2: Conectarse al servidor y ejecutar el script deploy.sh
      - name: Desplegar en el servidor remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: "${{ secrets.PASSWORD }}"
          port: ${{ secrets.PORT }}          
          script: |
            # Navegar al directorio donde se encuentra el script deploy.sh
            # Y donde se realizará el git pull
            # La ruta de destino depende de la rama que se esté desplegando.
            # Usaremos el mismo deploy.sh para determinar el TARGET_DIR.

            # Crear un archivo temporal para el script deploy.sh en el servidor
            # Esto evita conflictos si deploy.sh no está en la misma ubicación
            # o si el git pull lo sobrescribe a mitad de la ejecución.
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > /tmp/deploy_temp.sh << EOF
            #!/bin/bash
            set -e

            echo "--- Despliegue iniciado para la rama: \$DEPLOY_BRANCH ---"

            # --- Configuración de Entornos ---
            PROD_DIR="/home/linuxuser/visor-monitoreo-regional"
            PROD_SERVICE="senapred-prod.service"

            STAGING_DIR="/home/linuxuser/senapred-monitor-staging"
            STAGING_SERVICE="senapred-staging.service"

            # --- Lógica de Despliegue ---
            TARGET_DIR=""
            TARGET_BRANCH=""
            TARGET_SERVICE=""

            if [ "\$DEPLOY_BRANCH" = "main" ]; then
                echo ">>> Configurando para PRODUCCIÓN..."
                TARGET_DIR=\$PROD_DIR
                TARGET_BRANCH="main"
                TARGET_SERVICE=\$PROD_SERVICE
            elif [ "\$DEPLOY_BRANCH" = "develop" ]; then
                echo ">>> Configurando para STAGING..."
                TARGET_DIR=\$STAGING_DIR
                TARGET_BRANCH="develop"
                TARGET_SERVICE=\$STAGING_SERVICE
            else
                echo "!!! Rama '\''\$DEPLOY_BRANCH'\'' no configurada. Abortando."
                exit 1
            fi

            echo "Directorio de destino: \$TARGET_DIR"
            echo "Servicio a reiniciar: \$TARGET_SERVICE"

            cd \$TARGET_DIR
            echo "Actualizando rama '\''\$TARGET_BRANCH'\'' desde GitHub..."
            git fetch origin
            git reset --hard origin/\$TARGET_BRANCH

            echo ">>> Reiniciando servicios específicos..."
            echo "\$SUDO_PASSWORD" | sudo -S systemctl restart \$TARGET_SERVICE
            echo "\$SUDO_PASSWORD" | sudo -S systemctl restart nginx # Nginx se reinicia siempre

            echo "--- Despliegue para '\''\$DEPLOY_BRANCH'\'' finalizado. ---"
            EOF'

            # Dar permisos de ejecución al script temporal
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod +x /tmp/deploy_temp.sh

            # Ejecutar el script temporal, pasándole la rama actual como variable de entorno
            # y la contraseña de sudo de forma segura
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S DEPLOY_BRANCH="${{ github.ref_name }}" SUDO_PASSWORD="${{ secrets.SUDO_PASSWORD }}" /tmp/deploy_temp.sh

            # Eliminar el script temporal después de la ejecución
            sudo rm /tmp/deploy_temp.sh

            echo "--- Flujo de despliegue completado para la rama ${{ github.ref_name }} ---"