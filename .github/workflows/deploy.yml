name: Despliegue de Visor Monitoreo Regional

on:
  push:
    branches:
      - main
      - develop

# Tareas a ejecutar
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio en la máquina virtual de GitHub Actions
      - name: Checkout del código
        uses: actions/checkout@v3

      # NUEVO PASO: Configurar ssh-agent para usar la clave privada
      - name: Configurar SSH Agent
        uses: webfactory/ssh-agent@v0.7.0 # Usa una versión estable. Puedes buscar la más reciente si quieres.
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DEPLOY }}

      # Paso 2: Conectarse al servidor y ejecutar el script deploy.sh
      - name: Desplegar en el servidor remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: "${{ secrets.PASSWORD }}" # Esto es para la autenticación SSH con el servidor, no para Git.
          port: ${{ secrets.PORT }}
          script: |
            # Antes de hacer git pull/fetch, asegúrate de que el ssh-agent esté funcionando
            # Puedes agregar esto al inicio de tu script temporal si quieres:
            # eval "$(ssh-agent -s)" # Iniciar el ssh-agent (si no está ya iniciado por webfactory/ssh-agent)
            # ssh-add ~/.ssh/id_ed25519 # Asegurarse de que la clave privada esté cargada (si no está por webfactory/ssh-agent)

            # Navegar al directorio donde se encuentra el script deploy.sh
            # Y donde se realizará el git pull
            # La ruta de destino depende de la rama que se esté desplegando.

            # Crear un archivo temporal para el script deploy.sh en el servidor
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > /tmp/deploy_temp.sh << EOF
            #!/bin/bash
            set -e

            echo "--- Despliegue iniciado para la rama: \$DEPLOY_BRANCH ---"

            # --- Configuración de Entornos ---
            PROD_DIR="/home/linuxuser/visor-monitoreo-regional"
            PROD_SERVICE="senapred-prod.service"

            STAGING_DIR="/home/linuxuser/senapred-monitor-staging"
            STAGING_SERVICE="senapred-staging.service"

            # --- Lógica de Despliegue ---
            TARGET_DIR=""
            TARGET_BRANCH=""
            TARGET_SERVICE=""

            if [ "\$DEPLOY_BRANCH" = "main" ]; then
                echo ">>> Configurando para PRODUCCIÓN..."
                TARGET_DIR=\$PROD_DIR
                TARGET_BRANCH="main"
                TARGET_SERVICE=\$PROD_SERVICE
            elif [ "\$DEPLOY_BRANCH" = "develop" ]; then
                echo ">>> Configurando para STAGING..."
                TARGET_DIR=\$STAGING_DIR
                TARGET_BRANCH="develop"
                TARGET_SERVICE=\$STAGING_SERVICE
            else
                echo "!!! Rama '\''\$DEPLOY_BRANCH'\'' no configurada. Abortando."
                exit 1
            fi

            echo "Directorio de destino: \$TARGET_DIR"
            echo "Servicio a reiniciar: \$TARGET_SERVICE"

            # Asegúrate de que el ssh-agent tenga la clave cargada antes de git fetch
            # Esto es crucial si 'webfactory/ssh-agent' no lo hace de forma persistente.
            # Evaluar ssh-agent en la shell actual, para que los comandos git lo reconozcan
            eval "$(ssh-agent -s)" > /dev/null
            # Agregar la clave SSH privada. Es posible que el PATH a la clave necesite ser ajustado
            # dependiendo de cómo `webfactory/ssh-agent` la gestione en el entorno de la acción.
            # Si la clave ya está en el ssh-agent no será necesario ssh-add, pero no hace daño.
            # Sin embargo, la acción webfactory/ssh-agent debería encargarse de esto.
            # Si esto sigue fallando, podríamos necesitar escribir la clave en un archivo temporal
            # en el servidor y luego añadirla. Pero intentemos esta forma primero.

            cd \$TARGET_DIR
            echo "Actualizando rama '\''\$TARGET_BRANCH'\'' desde GitHub..."
            git fetch origin
            git reset --hard origin/\$TARGET_BRANCH

            echo ">>> Reiniciando servicios específicos..."
            echo "\$SUDO_PASSWORD" | sudo -S systemctl restart \$TARGET_SERVICE
            echo "\$SUDO_PASSWORD" | sudo -S systemctl restart nginx # Nginx se reinicia siempre

            echo "--- Despliegue para '\''\$DEPLOY_BRANCH'\'' finalizado. ---"
            EOF'

            # Dar permisos de ejecución al script temporal
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod +x /tmp/deploy_temp.sh

            # Ejecutar el script temporal, pasándole la rama actual como variable de entorno
            # y la contraseña de sudo de forma segura
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S DEPLOY_BRANCH="${{ github.ref_name }}" SUDO_PASSWORD="${{ secrets.SUDO_PASSWORD }}" /tmp/deploy_temp.sh

            # Eliminar el script temporal después de la ejecución
            sudo rm /tmp/deploy_temp.sh

            echo "--- Flujo de despliegue completado para la rama ${{ github.ref_name }} ---"