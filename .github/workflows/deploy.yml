name: Despliegue de Visor Monitoreo Regional

on:
  push:
    branches:
      - main
      - develop

# Tareas a ejecutar
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio en la máquina virtual de GitHub Actions
      - name: Checkout del código
        uses: actions/checkout@v3

      # Paso 2: Configurar el entorno de despliegue
      - name: Configurar SSH Agent para Git
        uses: webfactory/ssh-agent@v0.7.0 # Versión recomendada, puede ser v0.8.0 o la más reciente
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DEPLOY }}

      # Paso 2: Conectarse al servidor y ejecutar el script deploy.sh
      
      - name: Desplegar en el servidor remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: "${{ secrets.PASSWORD }}"
          port: ${{ secrets.PORT }}
          script: |
            # Este 'script' se ejecuta en el SERVIDOR REMOTO.
            # La acción 'webfactory/ssh-agent' ya se encargó de configurar el ssh-agent
            # en el entorno del RUNNER de GitHub Actions.
            # Por lo tanto, no necesitas 'eval "$(ssh-agent -s)"' ni 'ssh-add' aquí.
            # Git debería encontrar las credenciales automáticamente si el runner está bien configurado.

            set -e # Esto asegura que el script se detenga si algún comando falla

            echo "--- Despliegue iniciado para la rama: $DEPLOY_BRANCH ---"

            # --- Configuración de Entornos ---
            PROD_DIR="/home/linuxuser/visor-monitoreo-regional"
            PROD_SERVICE="senapred-prod.service"

            STAGING_DIR="/home/linuxuser/senapred-monitor-staging"
            STAGING_SERVICE="senapred-staging.service"

            # --- Lógica de Despliegue ---
            TARGET_DIR=""
            TARGET_BRANCH=""
            TARGET_SERVICE=""

            if [ "$DEPLOY_BRANCH" = "main" ]; then
                echo ">>> Configurando para PRODUCCIÓN..."
                TARGET_DIR=$PROD_DIR
                TARGET_BRANCH="main"
                TARGET_SERVICE=$PROD_SERVICE
            elif [ "$DEPLOY_BRANCH" = "develop" ]; then
                echo ">>> Configurando para STAGING..."
                TARGET_DIR=$STAGING_DIR
                TARGET_BRANCH="develop"
                TARGET_SERVICE=$STAGING_SERVICE
            else
                echo "!!! Rama '$DEPLOY_BRANCH' no configurada. Abortando."
                exit 1
            fi

            echo "Directorio de destino: $TARGET_DIR"
            echo "Servicio a reiniciar: $TARGET_SERVICE"

            cd $TARGET_DIR
            echo "Actualizando rama '$TARGET_BRANCH' desde GitHub..."
            # El fallo 'Host key verification failed' indica que el servidor Git de GitHub
            # no ha sido añadido a los 'known_hosts' del usuario 'linuxuser' en el servidor remoto.
            # Para la automatización, podemos añadirlo de forma no interactiva.
            ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true # Añade github.com a known_hosts
            chmod 600 ~/.ssh/known_hosts # Asegura permisos correctos
            
            git fetch origin
            git reset --hard origin/$TARGET_BRANCH

            echo ">>> Reiniciando servicios específicos..."
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S systemctl restart $TARGET_SERVICE
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S systemctl restart nginx # Nginx se reinicia siempre

            echo "--- Despliegue para '$DEPLOY_BRANCH' finalizado. ---"
            
            # El resto del script temporal se gestiona por appleboy/ssh-action, no es parte de este script temporal