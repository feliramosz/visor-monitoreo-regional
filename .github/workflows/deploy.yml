name: Despliegue de Visor Monitoreo Regional

on:
  push:
    branches:
      - main
      - develop

# Tareas a ejecutar
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio en la máquina virtual de GitHub Actions
      - name: Checkout del código
        uses: actions/checkout@v3

      # Configurar ssh-agent para usar la clave privada (en el runner de GitHub Actions)
      - name: Configurar SSH Agent para Git
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DEPLOY }}

      # Paso 2: Conectarse al servidor y ejecutar el script deploy.sh
      - name: Desplegar en el servidor remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: "${{ secrets.PASSWORD }}"
          port: ${{ secrets.PORT }}
          script: |
            # Este es el script que se ejecutará en el servidor remoto.

            set -e # Salir inmediatamente si un comando falla

            # Definimos las variables que serán pasadas como argumentos al script temporal
            _DEPLOY_BRANCH_ARG="${{ github.ref_name }}"
            _SUDO_PASSWORD_ARG="${{ secrets.SUDO_PASSWORD }}"

            # Creamos el script temporal directamente con 'cat' y heredoc.
            # Asegúrate de que no haya espacios antes de EOT de cierre.
            echo "$_SUDO_PASSWORD_ARG" | sudo -S bash -c 'cat > /tmp/deploy_temp.sh << "EOT"
            #!/bin/bash
            set -e

            # Leer los argumentos pasados al script
            DEPLOY_BRANCH="$1"
            SUDO_PASSWORD="$2"

            echo "--- Despliegue iniciado para la rama: $DEPLOY_BRANCH ---"

            # --- Configuración de Entornos ---
            PROD_DIR="/home/linuxuser/visor-monitoreo-regional"
            PROD_SERVICE="senapred-prod.service"

            STAGING_DIR="/home/linuxuser/senapred-monitor-staging"
            STAGING_SERVICE="senapred-staging.service"

            # --- Lógica de Despliegue ---
            TARGET_DIR=""
            TARGET_BRANCH=""
            TARGET_SERVICE=""

            if [ "$DEPLOY_BRANCH" = "main" ]; then
                echo ">>> Configurando para PRODUCCIÓN..."
                TARGET_DIR=$PROD_DIR
                TARGET_BRANCH="main"
                TARGET_SERVICE=$PROD_SERVICE
            elif [ "$DEPLOY_BRANCH" = "develop" ]; then
                echo ">>> Configurando para STAGING..."
                TARGET_DIR=$STAGING_DIR
                TARGET_BRANCH="develop"
                TARGET_SERVICE=$STAGING_SERVICE
            else
                echo "!!! Rama '$DEPLOY_BRANCH' no configurada. Abortando."
                exit 1
            fi

            echo "Directorio de destino: $TARGET_DIR"
            echo "Servicio a reiniciar: $TARGET_SERVICE"

            cd "$TARGET_DIR" # Usar comillas para el path, por si acaso

            echo "Actualizando rama '$TARGET_BRANCH' desde GitHub..."

            # *** INICIO DE LA MODIFICACIÓN CLAVE PARA AUTENTICACIÓN GIT EN SERVIDOR ***
            # Iniciar ssh-agent y cargar la clave privada
            eval "$(ssh-agent -s)" # Inicia un agente SSH en esta sesión
            ssh-add ~/.ssh/id_ed25519 # Añade la clave privada por defecto al agente

            # Gestiona el known_hosts para evitar "Host key verification failed"
            mkdir -p ~/.ssh # Asegura que el directorio existe
            ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true
            chmod 600 ~/.ssh/known_hosts

            git fetch origin
            git reset --hard origin/$TARGET_BRANCH
            # *** FIN DE LA MODIFICACIÓN CLAVE ***

            echo ">>> Reiniciando servicios específicos..."
            echo "$SUDO_PASSWORD" | sudo -S systemctl restart $TARGET_SERVICE
            echo "$SUDO_PASSWORD" | sudo -S systemctl restart nginx # Nginx se reinicia siempre

            echo "--- Despliegue para '$DEPLOY_BRANCH' finalizado. ---"
            EOT" # Cierre del heredoc
            # FIN DE LA CREACIÓN DEL SCRIPT TEMPORAL

            # Dar permisos de ejecución al script temporal
            echo "$_SUDO_PASSWORD_ARG" | sudo -S chmod +x /tmp/deploy_temp.sh

            # Ejecutar el script temporal y pasar las variables como argumentos
            echo "$_SUDO_PASSWORD_ARG" | sudo -S /tmp/deploy_temp.sh "$_DEPLOY_BRANCH_ARG" "$_SUDO_PASSWORD_ARG"

            # Eliminar el script temporal después de la ejecución
            sudo rm /tmp/deploy_temp.sh

            echo "--- Flujo de despliegue completado para la rama ${{ github.ref_name }} ---"